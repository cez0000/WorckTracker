@model WorkTracker.Models.Activity

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Activity</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" id="activityForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="d-flex">
                <div class="form-group me-2">
                    <label for="hoursInput">Hours</label>
                    <input type="number" id="hoursInput" class="form-control" min="0" max="12" placeholder="HH" required>
                </div>
                <div class="form-group">
                    <label for="minutesInput">Minutes</label>
                    <input type="number" id="minutesInput" class="form-control" min="0" max="59" placeholder="MM" required>
                    <input type="hidden" id="durationInput" name="Duration">
                </div>
            </div>
            <span asp-validation-for="Duration" class="text-danger"></span>

            
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input type="date" asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ActivityTypeId" class="control-label">Activity Type</label>
                <select asp-for="ActivityTypeId" class ="form-control" asp-items="ViewBag.ActivityTypeId"></select>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById('activityForm');
        const hoursInput = document.getElementById('hoursInput');
        const minutesInput = document.getElementById('minutesInput');
        const durationInput = document.getElementById('durationInput');
        let errorMessage = "Duration must be greater than 00:00.";
        const maxHours = 12;
        const maxMinutes = 59;

        form.addEventListener('submit', function (e) {
            e.preventDefault();

            const hours = hoursInput.value.trim();
            const minutes = minutesInput.value.trim();

            if ((hours === "" && minutes === "") || (hours === "0" && minutes === "0")) {

                durationInput.value = "";
                alert(errorMessage);
            }
            else if (+hours > 12 || (+hours === 12 && +minutes > 0)) {
                errorMessage = "Duration cannot be longer than 12 hours."
                alert(errorMessage);
            }
            else {

                const formattedHours = hours.padStart(2, '0');
                const formattedMinutes = minutes.padStart(2, '0');
                const duration = `${formattedHours}:${formattedMinutes}:00`;

                durationInput.value = duration;
            }

            if (durationInput.value !== "") {
                form.submit();
            }
        });

        hoursInput.addEventListener('input', function () {
            if (parseInt(hoursInput.value) > maxHours) {
                hoursInput.value = maxHours;
            }
        });

        minutesInput.addEventListener('input', function () {
            if (parseInt(minutesInput.value) > maxMinutes) {
                minutesInput.value = maxMinutes;
            }
        });
    });
</script>
